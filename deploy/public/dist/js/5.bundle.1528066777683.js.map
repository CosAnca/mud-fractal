{"version":3,"sources":["webpack:///./behaviours/HomePage.js","webpack:///./core/modules/resizer.js","webpack:///./core/modules/inview.js","webpack:///./core/Behaviour.js"],"names":["HomePage","mount","_this","$el","classList","add","$events","attachAll","$screen","on","_ref2","width","height","query","unmount","events","click [data-link]","onClick","e","elm","preventDefault","toggle","viewport","enter","exit","routes","screens","(min-width: 1024px)","_ref3","match","(min-width: 680px)","_ref4","_core_Behaviour__WEBPACK_IMPORTED_MODULE_0__","resizer_query","es","item","getPropertyValue","getCurrentMediaQuery","window","getComputedStyle","document","body","windowMatch","breakpoint","matchMedia","matches","getWindowProps","innerWidth","innerHeight","mapEventsToResize","_ref","_slicedToArray","fn","matchQueryTest","once","arg","value","bind","eventBus","Object","entries","modules_resizer","handle","last","windowResizeEvent","_getWindowProps","emit","addWindowResizeEvent","isRunning","raf_default","a","addEventListener","destroy","removeEventListener","cancel","arguments","length","undefined","bank","_extends","forEach","off","modules_inview","root","options","defaults","inview_extends","rootMargin","threshold","observer","unobserve","IntersectionObserver","entry","type","isIntersecting","observe","Behaviour","this","el","name","_classCallCheck","registerObserverOptions","init","$observer","$eventBus","actions","$refs","refs","createEvents","call","updateRefs","Behaviour_extends","$name","$data","composeProps","attributes"],"mappings":"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","file":"5.bundle.1528066777683.js","sourcesContent":["import Behaviour from '@/core/Behaviour'\n\nexport default class HomePage extends Behaviour {\n\tmount = () => {\n\t\t// log('mount: HomePage')\n\t\tthis.$el.classList.add('mount')\n\t\tthis.$events.attachAll()\n\t\tthis.$screen.on('window:resize', ({ width, height, query }) => {\n\t\t\t// log({ width, height, query })\n\t\t})\n\t}\n\n\tunmount = () => {\n\t\t// log('unmount: HomePage')\n\t\tthis.$el.classList.add('unmount')\n\t}\n\n\tevents = {\n\t\t'click [data-link]': 'onClick'\n\t}\n\n\tonClick = (e, elm) => {\n\t\te.preventDefault()\n\t\telm.classList.toggle('huzzah')\n\t}\n\n\tviewport = {\n\t\tenter: () => {\n\t\t\t// log('ExampleClass enter')\n\t\t},\n\n\t\texit: () => {\n\t\t\t// log('ExampleClass exit')\n\t\t}\n\t}\n\n\troutes = {\n\t\tenter: () => {\n\t\t\tthis.$el.classList.toggle('enter')\n\t\t},\n\t\texit: () => {\n\t\t\tthis.$el.classList.toggle('exit')\n\t\t}\n\t}\n\n\tscreens = {\n\t\t'(min-width: 1024px)': ({ match, width, height, query }) => {\n\t\t\t// log('(min-width: 1024px)', match, width, height, query)\n\t\t},\n\n\t\t'(min-width: 680px)': ({ match, width, height, query }) => {\n\t\t\t// log('(min-width: 680px)', match, width, height, query)\n\t\t}\n\t}\n}\n","import eventBus from '@/core/modules/eventBus'\nimport raf from 'raf'\nimport * as R from 'ramda'\n\n// get the :after style from the body\nconst getStyle = () => window.getComputedStyle(document.body, ':after')\n\n// get the content prop and give it a clean\nconst query = R.compose(R.replace(/'|\"/g, ''), item =>\n\titem.getPropertyValue('content')\n)\n\n// compose the functions together to return the current breakpoint\nconst getCurrentMediaQuery = R.compose(query, getStyle)\n\nconst windowMatch = breakpoint => window.matchMedia(breakpoint).matches\n\n/**\n *\n * @function getWindowProps\n *\n * @return :object with the current width/height/breakpoint\n */\nfunction getWindowProps() {\n\tconst width = window.innerWidth\n\tconst height = window.innerHeight\n\tconst query = getCurrentMediaQuery()\n\n\treturn {\n\t\twidth,\n\t\theight,\n\t\tquery\n\t}\n}\n/**\n *\n * consumes an object like this:\n *\n *  {\n *\t'(min-width: 960px)': () => {},\n *\t'(min-width: 680px)': () => {}\n *\t}\n *\n * @function mapEventsToResize\n *\n * @param :object\n *\n * @return :array of functions\n */\nfunction mapEventsToResize(events) {\n\treturn R.compose(\n\t\tR.map(([breakpoint, fn]) => {\n\t\t\t// <REFACTOR></REFACTOR> me thinks this could be written in\n\t\t\t// a way that it can be defined outside of the loop\n\t\t\tconst once = (arg, fn) => {\n\t\t\t\tif (once.value === arg) return\n\t\t\t\tfn({ match: arg, ...getWindowProps() })\n\t\t\t\tonce.value = arg\n\t\t\t}\n\n\t\t\t// <REFACTOR></REFACTOR> me thinks this could be written in\n\t\t\t// a way that it can be defined outside of the loop\n\t\t\tconst test = (breakpoint, fn) => {\n\t\t\t\tconst state = windowMatch(breakpoint)\n\t\t\t\tonce(state, fn)\n\t\t\t}\n\n\t\t\tconst matchQueryTest = test.bind(null, breakpoint, fn)\n\t\t\twindowMatch(breakpoint) && matchQueryTest()\n\t\t\teventBus.on('window:resize', matchQueryTest)\n\n\t\t\treturn matchQueryTest\n\t\t}),\n\t\tObject.entries\n\t)(events)\n}\n\n/***\n *\n * Wrapper/Helper window resize event\n *\n * @function resizer\n *\n * @return :function resizer\n */\n\nexport default (function resizer() {\n\t// setup a handle reference\n\tlet handle\n\n\t// reference the current, will become to previous one\n\tlet last = getCurrentMediaQuery()\n\n\t/**\n\t * The throttled window resize event\n\t * @private\n\t * @function windowResizeEvent\n\t *\n\t * @return void\n\t */\n\tfunction windowResizeEvent() {\n\t\tconst { width, height, query } = getWindowProps()\n\n\t\teventBus.emit('window:resize', {\n\t\t\twidth,\n\t\t\theight,\n\t\t\tquery\n\t\t})\n\n\t\tif (query !== last) {\n\t\t\tlast = query\n\t\t\teventBus.emit('window:breakpoint', {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tquery\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * add the window resize event\n\t *\n\t * returns the destroy method\n\t *\n\t * @function addWindowResizeEvent\n\t *\n\t * @return object\n\t */\n\tfunction addWindowResizeEvent() {\n\t\tif (addWindowResizeEvent.isRunning) return\n\t\taddWindowResizeEvent.isRunning = true\n\t\thandle = raf.bind(null, windowResizeEvent)\n\n\t\twindow.addEventListener('resize', handle, false)\n\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\tif (!addWindowResizeEvent.isRunning) return\n\t\t\t\taddWindowResizeEvent.isRunning = false\n\t\t\t\twindow.removeEventListener('resize', handle, false)\n\t\t\t\thandle.cancel()\n\t\t\t}\n\t\t}\n\t}\n\n\taddWindowResizeEvent.isRunning = false\n\n\treturn (events = {}) => {\n\t\taddWindowResizeEvent()\n\n\t\t// store the current events\n\t\tlet bank = mapEventsToResize(events)\n\n\t\treturn {\n\t\t\tget breakpoint() {\n\t\t\t\treturn getCurrentMediaQuery()\n\t\t\t},\n\n\t\t\tget width() {\n\t\t\t\treturn window.innerWidth\n\t\t\t},\n\n\t\t\tget height() {\n\t\t\t\treturn window.innerHeight\n\t\t\t},\n\n\t\t\tdestroy() {\n\t\t\t\tbank.forEach(fn => eventBus.off('window:resize', fn))\n\t\t\t\tbank = []\n\t\t\t},\n\n\t\t\t...eventBus\n\t\t}\n\t}\n})()\n","import * as R from 'ramda'\n\nconst inview = R.curry((root, events, options) => {\n\tif (!events) return\n\n\tconst opts = options ? options : {}\n\tconst defaults = {\n\t\trootMargin: '0px',\n\t\tthreshold: 0,\n\t\t...opts\n\t}\n\n\tconst destroy = () => observer.unobserve(root)\n\n\tconst onIntersection = entry => {\n\t\tconst item = R.head(entry)\n\t\tconst { isIntersecting } = item\n\t\tconst type = isIntersecting ? 'enter' : 'exit'\n\t\tif (events[type]) {\n\t\t\tevents[type]({\n\t\t\t\t...item,\n\t\t\t\tdestroy\n\t\t\t})\n\t\t}\n\t}\n\n\tconst observer = new IntersectionObserver(onIntersection, defaults)\n\n\tobserver.observe(root)\n\n\treturn {\n\t\tdestroy\n\t}\n})\n\nexport default inview\n","import createEvents from '@/core/modules/createEvents'\nimport refs, { composeProps } from '@/core/modules/refs'\nimport eventBus from '@/core/modules/eventBus'\nimport resizer from '@/core/modules/resizer'\nimport inview from '@/core/modules/inview'\nimport * as Actions from '@/core/router/actions'\n\n/**\n * class Behaviour\n *\n */\nexport default class Behaviour {\n\tconstructor(el = document, name) {\n\t\tthis.$name = name\n\t\tthis.$el = el\n\t\tthis.$eventBus = eventBus\n\t\tthis.$data = composeProps([...this.$el.attributes]) // here lies a bug\n\t}\n\n\tregisterObserverOptions = {}\n\n\troutes = {\n\t\tenter: () => {},\n\t\texit: () => {}\n\t}\n\n\tviewport = {\n\t\tenter: () => {},\n\t\texit: () => {}\n\t}\n\n\tscreens = {}\n\n\tinit = () => {\n\t\tthis.$observer = inview(\n\t\t\tthis.$el,\n\t\t\tthis.viewport,\n\t\t\tthis.registerObserverOptions\n\t\t)\n\n\t\tthis.$eventBus.on(Actions.ROUTE_TRANSITION_ENTER, this.routes.enter)\n\t\tthis.$eventBus.on(Actions.ROUTE_TRANSITION_EXIT, this.routes.exit)\n\t\tthis.$refs = refs(this.$el)\n\t\tthis.$screen = resizer(this.screens)\n\t\tif (this.events) {\n\t\t\tthis.$events = createEvents.call(this, this.$el, this.events)\n\t\t}\n\n\t\treturn this\n\t}\n\n\tupdateRefs = () => {\n\t\tthis.$refs = { ...this.$refs, ...refs(this.$el) }\n\t}\n\n\tmount = () => {}\n\n\tunmount = () => {}\n\n\tdestroy = () => {\n\t\tthis.unmount()\n\t\tthis.$eventBus.off(Actions.ROUTE_TRANSITION_ENTER, this.routes.enter)\n\t\tthis.$eventBus.off(Actions.ROUTE_TRANSITION_EXIT, this.routes.exit)\n\t\tthis.$screen.destroy()\n\n\t\tif (this.viewport) {\n\t\t\tthis.$observer.destroy()\n\t\t}\n\n\t\tif (this.events) {\n\t\t\tthis.$events.destroy()\n\t\t}\n\t}\n}\n"],"sourceRoot":""}