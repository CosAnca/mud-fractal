{"version":3,"sources":["webpack:///./behaviours/Page1.js","webpack:///./core/modules/resizer.js","webpack:///./core/modules/inview.js","webpack:///./core/Behaviour.js"],"names":["Page1","mount","log","unmount","_core_Behaviour__WEBPACK_IMPORTED_MODULE_0__","handle","resizer_query","es","item","getPropertyValue","getCurrentMediaQuery","window","getComputedStyle","document","body","last","getWindowProps","width","innerWidth","height","innerHeight","query","resizer_windowResizeEvent","_getWindowProps","eventBus","emit","resizer_windowResize","windowResize","isRunning","raf_default","a","bind","addEventListener","destroy","removeEventListener","cancel","windowMatch","breakpoint","matchMedia","matches","resizer_mapEventsToResize","events","Object","entries","map","_ref","_ref2","_slicedToArray","fn","funk","once","arg","value","match","on","modules_resizer","arguments","length","undefined","bank","_extends","forEach","off","modules_inview","root","options","defaults","inview_extends","rootMargin","threshold","observer","unobserve","IntersectionObserver","entry","type","isIntersecting","observe","Behaviour","_this","this","el","name","_classCallCheck","registerObserverOptions","routes","enter","exit","viewport","screens","init","$observer","$el","$eventBus","$refs","refs","$screen","$events","createEvents","call","updateRefs","Behaviour_extends","$name","$data","composeProps","attributes"],"mappings":"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","file":"4.bundle.1527634219555.js","sourcesContent":["import Behaviour from '@/core/Behaviour'\n\nexport default class Page1 extends Behaviour {\n\tmount = () => {\n\t\tlog('mount: Page1 Example Behaviour')\n\t}\n\n\tunmount = () => {\n\t\tlog('unmount: Page1 Example Behaviour')\n\t}\n}\n","import eventBus from '@/core/modules/eventBus'\nimport raf from 'raf'\nimport * as R from 'ramda'\n\nlet handle\n\nconst getStyle = () => window.getComputedStyle(document.body, ':after')\nconst query = R.compose(R.replace(/'|\"/g, ''), item =>\n\titem.getPropertyValue('content')\n)\nconst getCurrentMediaQuery = R.compose(query, getStyle)\n\nlet last = getCurrentMediaQuery()\n\nconst getWindowProps = () => {\n\tconst width = window.innerWidth\n\tconst height = window.innerHeight\n\tconst query = getCurrentMediaQuery()\n\n\treturn {\n\t\twidth,\n\t\theight,\n\t\tquery\n\t}\n}\n\nconst windowResizeEvent = () => {\n\tconst { width, height, query } = getWindowProps()\n\n\teventBus.emit('window:resize', {\n\t\twidth,\n\t\theight,\n\t\tquery\n\t})\n\n\tif (query !== last) {\n\t\tlast = query\n\t\teventBus.emit('window:breakpoint', {\n\t\t\twidth,\n\t\t\theight,\n\t\t\tquery\n\t\t})\n\t}\n}\n\nconst windowResize = () => {\n\tif (windowResize.isRunning) return\n\twindowResize.isRunning = true\n\thandle = raf.bind(null, windowResizeEvent)\n\n\twindow.addEventListener('resize', handle, false)\n\n\treturn {\n\t\tdestroy() {\n\t\t\tif (!windowResize.isRunning) return\n\t\t\twindowResize.isRunning = false\n\t\t\twindow.removeEventListener('resize', handle, false)\n\t\t\thandle.cancel()\n\t\t}\n\t}\n}\nwindowResize.isRunning = false\n\nconst windowMatch = breakpoint => window.matchMedia(breakpoint).matches\n\nconst mapEventsToResize = events =>\n\tObject.entries(events).map(([breakpoint, fn]) => {\n\t\tconst once = (arg, fn) => {\n\t\t\tif (once.value === arg) return\n\t\t\tfn({ match: arg, ...getWindowProps() })\n\t\t\tonce.value = arg\n\t\t}\n\n\t\tconst test = (breakpoint, fn) => {\n\t\t\tconst state = windowMatch(breakpoint)\n\t\t\tonce(state, fn)\n\t\t}\n\n\t\tconst funk = test.bind(null, breakpoint, fn)\n\t\twindowMatch(breakpoint) && funk()\n\t\teventBus.on('window:resize', funk)\n\n\t\treturn funk\n\t})\n\nconst resizer = (events = {}) => {\n\twindowResize()\n\n\tlet bank = mapEventsToResize(events)\n\n\tconst destroy = () => {\n\t\tbank.forEach(fn => eventBus.off('window:resize', fn))\n\t\tbank = []\n\t}\n\n\treturn {\n\t\tget breakpoint() {\n\t\t\treturn getCurrentMediaQuery()\n\t\t},\n\n\t\tget width() {\n\t\t\treturn window.innerWidth\n\t\t},\n\n\t\tget height() {\n\t\t\treturn window.innerHeight\n\t\t},\n\n\t\tdestroy,\n\n\t\t...eventBus\n\t}\n}\n\nexport default resizer\n","import * as R from 'ramda'\n\nconst inview = R.curry((root, events, options) => {\n\tif (!events) return\n\n\tconst opts = options ? options : {}\n\tconst defaults = {\n\t\trootMargin: '0px',\n\t\tthreshold: 0,\n\t\t...opts\n\t}\n\n\tconst destroy = () => observer.unobserve(root)\n\n\tconst onIntersection = entry => {\n\t\tconst item = R.head(entry)\n\t\tconst { isIntersecting } = item\n\t\tconst type = isIntersecting ? 'enter' : 'exit'\n\t\tif (events[type]) {\n\t\t\tevents[type]({\n\t\t\t\t...item,\n\t\t\t\tdestroy\n\t\t\t})\n\t\t}\n\t}\n\n\tconst observer = new IntersectionObserver(onIntersection, defaults)\n\n\tobserver.observe(root)\n\n\treturn {\n\t\tdestroy\n\t}\n})\n\nexport default inview\n","import createEvents from '@/core/modules/createEvents'\nimport refs, { composeProps } from '@/core/modules/refs'\nimport eventBus from '@/core/modules/eventBus'\nimport resizer from '@/core/modules/resizer'\nimport inview from '@/core/modules/inview'\n\n/**\n * class Behaviour\n *\n */\nexport default class Behaviour {\n\tconstructor(el = document, name) {\n\t\tthis.$name = name\n\t\tthis.$el = el\n\t\tthis.$eventBus = eventBus\n\t\tthis.$data = composeProps([...this.$el.attributes]) // here lies a bug\n\t}\n\n\tregisterObserverOptions = {}\n\n\troutes = {\n\t\tenter: () => {},\n\t\texit: () => {}\n\t}\n\n\tviewport = {\n\t\tenter: () => {},\n\t\texit: () => {}\n\t}\n\n\tscreens = {}\n\n\tinit = () => {\n\t\tthis.$observer = inview(\n\t\t\tthis.$el,\n\t\t\tthis.viewport,\n\t\t\tthis.registerObserverOptions\n\t\t)\n\n\t\tthis.$eventBus.on('routes:enter', this.routes.enter)\n\t\tthis.$eventBus.on('routes:exit', this.routes.exit)\n\t\tthis.$refs = refs(this.$el)\n\t\tthis.$screen = resizer(this.screens)\n\t\tif (this.events) {\n\t\t\tthis.$events = createEvents.call(this, this.$el, this.events)\n\t\t}\n\n\t\treturn this\n\t}\n\n\tupdateRefs = () => {\n\t\tthis.$refs = { ...this.$refs, ...refs(this.$el) }\n\t}\n\n\tmount = () => {}\n\n\tunmount = () => {}\n\n\tdestroy = () => {\n\t\tthis.unmount()\n\t\tthis.$eventBus.off('routes:enter', this.routes.enter)\n\t\tthis.$eventBus.off('routes:exit', this.routes.exit)\n\t\tthis.$screen.destroy()\n\n\t\tif (this.viewport) {\n\t\t\tthis.$observer.destroy()\n\t\t}\n\n\t\tif (this.events) {\n\t\t\tthis.$events.destroy()\n\t\t}\n\t}\n}\n"],"sourceRoot":""}