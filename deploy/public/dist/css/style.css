/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block;
}

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
     * Add the correct display in IE.
     */
main {
  display: block;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic;
}

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block;
}

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block;
}

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item;
}

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block;
}

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block;
}

/**
     * Add the correct display in IE.
     */
template {
  display: none;
}

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none;
}

/*
  Settings
*/
/*
  Utility functions
*/
/* stylelint-disable */
/*
  Media query debugger
*/
/* stylelint-disable */
body:after {
  position: fixed;
  bottom: 0;
  left: 0;
  font-size: 12px;
  background-color: rgba(26, 25, 29, 0.4);
  color: #ffffff;
  content: 'root';
  display: block;
  padding: 0.3125rem;
  z-index: 100001;
}

@media (min-width: 20em) {
  body::after {
    content: "small => (320px | 20em)";
  }
}

@media (min-width: 31.25em) {
  body::after {
    content: "xsmall => (500px | 31.25em)";
  }
}

@media (min-width: 46.25em) {
  body::after {
    content: "medium => (740px | 46.25em)";
  }
}

@media (min-width: 61.25em) {
  body::after {
    content: "large => (980px | 61.25em)";
  }
}

@media (min-width: 68.75em) {
  body::after {
    content: "xlarge => (1100px | 68.75em)";
  }
}

@media (min-width: 81.25em) {
  body::after {
    content: "max => (1300px | 81.25em)";
  }
}

/*
  Custom, site specific mixins
*/
/* stylelint-disable */
/*
  svg-symbols generated via `gulp symbols`
*/
/* stylelint-disable */
.icon {
  position: relative;
  display: block;
  max-width: 100%;
}

.icon > svg {
  position: absolute;
  width: 100%;
  max-width: 100%;
  height: 100%;
  display: block;
  fill: currentColor;
}

.icon:after {
  content: "";
  display: block;
  height: 0;
  width: auto;
}

/*
  Resets, and globals
*/
*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

img {
  display: block;
  max-width: 100%;
  height: auto;
}

fieldset {
  border: 0;
  padding: 0;
  margin: 0;
}

button {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background: none;
  padding: 0;
  border: 0;
}

.r-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.lazyload {
  opacity: 0;
  -webkit-transition: opacity 300ms ease-in-out;
  -o-transition: opacity 300ms ease-in-out;
  transition: opacity 300ms ease-in-out;
}

.wrapper {
  width: 100%;
  max-width: 86.25rem;
  margin: auto;
  padding: 0 0.9375rem;
}

@media (min-width: 46.25em) {
  .wrapper {
    padding: 0 1.875rem;
  }
}

@media (min-width: 61.25em) {
  .wrapper {
    padding: 0 3.75rem;
  }
}

.g-row {
  margin-bottom: 3rem;
}

@media (min-width: 46.25em) {
  .g-row {
    margin-bottom: 4.5rem;
  }
}

@media (min-width: 68.75em) {
  .g-row {
    margin-bottom: 6rem;
  }
}

@media (min-width: 20em) {
  .g\@small {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
}

@media (min-width: 31.25em) {
  .g\@xsmall {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
}

@media (min-width: 46.25em) {
  .g\@medium {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
}

@media (min-width: 61.25em) {
  .g\@large {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
}

@media (min-width: 68.75em) {
  .g\@xlarge {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
}

@media (min-width: 81.25em) {
  .g\@max {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
}

/*
  Base styles
  Typography, Buttons, Tables, Form elements, Etc
*/
.t-latin {
  color: #b2c15d;
}

.t-caribbean {
  color: #ee7827;
}

.t-asia {
  color: #634da2;
}

.t-neutral {
  color: #9b8863;
}

.t-bg-latin {
  background-color: #b2c15d;
}

.t-bg-caribbean {
  background-color: #ee7827;
}

.t-bg-asia {
  background-color: #634da2;
}

.t-bg-neutral {
  background-color: #9b8863;
}

/*
	Root
*/
html {
  font-size: 1em;
  line-height: 1.5;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: "franklin-gothic-urw", Franklin Gothic Medium, Tahoma;
  font-weight: 400;
  color: #282827;
}

/*
	Headings
*/
.heading-1,
h1 {
  font-size: calc(3.24732rem + 1.9542599999999997 * ((100vw - 26.25rem) / 53.75));
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-weight: 400;
  line-height: 0.84375;
  margin: 0 0 1.5rem;
}
@media screen and (min-width: 1280px) {
  .heading-1,
h1 {
    font-size: 5.20158rem;
  }
}
@media screen and (max-width: 420px) {
  .heading-1,
h1 {
    font-size: 3.24732rem;
  }
}

.heading-2,
h2 {
  font-size: calc(1.80203rem + 0.7637500000000002 * ((100vw - 26.25rem) / 53.75));
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-weight: 400;
  line-height: 0.84375;
  margin: 0 0 1.5rem;
}

@media screen and (min-width: 1280px) {
  .heading-2,
h2 {
    font-size: 2.56578rem;
  }
}

@media screen and (max-width: 420px) {
  .heading-2,
h2 {
    font-size: 1.80203rem;
  }
}

.heading-3,
h3 {
  font-size: calc(1.60181rem + 0.42547999999999986 * ((100vw - 26.25rem) / 53.75));
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-weight: 400;
  line-height: 0.84375;
  margin: 0 0 1.5rem;
}

@media screen and (min-width: 1280px) {
  .heading-3,
h3 {
    font-size: 2.02729rem;
  }
}

@media screen and (max-width: 420px) {
  .heading-3,
h3 {
    font-size: 1.60181rem;
  }
}

.heading-4,
h4 {
  font-size: calc(1.125rem + 0.29882999999999993 * ((100vw - 26.25rem) / 53.75));
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-weight: 400;
  line-height: 0.84375;
  margin: 0 0 1.5rem;
}

@media screen and (min-width: 1280px) {
  .heading-4,
h4 {
    font-size: 1.42383rem;
  }
}

@media screen and (max-width: 420px) {
  .heading-4,
h4 {
    font-size: 1.125rem;
  }
}

.heading-5,
h5 {
  font-size: calc(0.88889rem + 0.11111000000000004 * ((100vw - 26.25rem) / 53.75));
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-weight: 400;
  line-height: 0.84375;
  margin: 0 0 1.5rem;
}

@media screen and (min-width: 1280px) {
  .heading-5,
h5 {
    font-size: 1rem;
  }
}

@media screen and (max-width: 420px) {
  .heading-5,
h5 {
    font-size: 0.88889rem;
  }
}

.heading-6,
h6 {
  font-size: calc(0.79012rem + 0.09876999999999991 * ((100vw - 26.25rem) / 53.75));
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-weight: 400;
  line-height: 0.84375;
  margin: 0 0 1.5rem;
}

@media screen and (min-width: 1280px) {
  .heading-6,
h6 {
    font-size: 0.88889rem;
  }
}

@media screen and (max-width: 420px) {
  .heading-6,
h6 {
    font-size: 0.79012rem;
  }
}

/*
	Base element styles
	avoid adding font sizes to elements directly
	utilise the cascade and utility classes
*/
p {
  margin: 0 0 1.5rem;
}

small {
  font-size: 0.70233rem;
}

b,
strong {
  font-weight: 700;
}

em {
  font-style: normal;
}

a {
  text-decoration: none;
  color: inherit;
  -webkit-transition: opacity 300ms ease;
  -o-transition: opacity 300ms ease;
  transition: opacity 300ms ease;
}

address {
  font-style: normal;
}

/*
  Object patterns
*/
.o-burger {
  position: relative;
  display: block;
  width: 3.125rem;
  height: 3.125rem;
  background-color: #a70e0a;
}

.o-burger > span {
  -webkit-transition: -webkit-transform 300ms;
  transition: -webkit-transform 300ms;
  -o-transition: transform 300ms;
  transition: transform 300ms;
  transition: transform 300ms, -webkit-transform 300ms;
  -webkit-transform: translateY(0);
      -ms-transform: translateY(0);
          transform: translateY(0);
  margin: auto;
}

.o-burger > span, .o-burger > span::before, .o-burger > span::after {
  width: 1.25rem;
  height: 0.125rem;
  background-color: #ffffff;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  z-index: 21;
  border-radius: 0.125rem;
}

.o-burger > span::before, .o-burger > span::after {
  -webkit-transition: -webkit-transform 300ms;
  transition: -webkit-transform 300ms;
  -o-transition: transform 300ms;
  transition: transform 300ms;
  transition: transform 300ms, -webkit-transform 300ms;
  content: ' ';
}

.o-burger > span::before {
  -webkit-transform: translateY(-0.3125rem);
      -ms-transform: translateY(-0.3125rem);
          transform: translateY(-0.3125rem);
}

.o-burger > span::after {
  -webkit-transform: translateY(0.3125rem);
      -ms-transform: translateY(0.3125rem);
          transform: translateY(0.3125rem);
}

.o-burger.is-active > span::before {
  -webkit-transform: translateY(0) rotate(45deg);
      -ms-transform: translateY(0) rotate(45deg);
          transform: translateY(0) rotate(45deg);
}

.o-burger.is-active > span::after {
  -webkit-transform: translateY(0) rotate(-45deg);
      -ms-transform: translateY(0) rotate(-45deg);
          transform: translateY(0) rotate(-45deg);
}

.o-burger.is-active span {
  background-color: transparent;
}

.o-btn {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  padding: 0.3125rem 1rem;
  text-transform: uppercase;
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  font-size: 1.125rem;
}

.o-btn--submit {
  color: #ffffff;
  background-color: #b2c15d;
  width: 100%;
}

.o-btn--buy {
  color: #ffffff;
  background-color: #b2c15d;
}

.o-btn--amazon {
  color: #ffffff;
  background-color: #fcb12a;
}

/*
  Global elements patterns
*/
.c-header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
  -webkit-box-pack: start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  z-index: 5;
  padding-top: 0.9375rem;
}

@media (min-width: 61.25em) {
  .c-header {
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end;
    position: relative;
    padding-top: 3.125rem;
  }
}

.c-header--float {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
}

.c-header__logo {
  display: inline-block;
  background-color: #cb1d18;
  padding: 0.625rem 0.9375rem;
}

@media (min-width: 61.25em) {
  .c-header__logo {
    margin-right: auto;
  }
}

/*
	[1] Above both levels of menu
*/
.c-header__btn {
  z-index: 3;
}

@media (min-width: 61.25em) {
  .c-header__btn {
    display: none;
  }
}

.c-header__action {
  height: 2.5rem;
  background-color: #ffffff;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-item-align: center;
      align-self: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  margin-bottom: auto;
}

.c-header__action .icon {
  width: 1.25rem;
}

.c-header__action--search {
  width: 2.5rem;
  background-color: #ffffff;
  color: #cb1d18;
  margin-left: auto;
}

@media (min-width: 61.25em) {
  .c-header__action--search {
    margin-left: 0.625rem;
  }
}

@media (min-width: 68.75em) {
  .c-header__action--search {
    margin-left: 2.5rem;
  }
}

.c-header__action--basket {
  min-width: 2.5rem;
  background-color: #e7e6e0;
  margin-bottom: auto;
}

.c-header__action--basket > a {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-item-align: center;
      align-self: center;
  padding: 0 0.3125rem;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  height: 100%;
}

@media (min-width: 61.25em) {
  .c-header__action--basket > a {
    position: relative;
    z-index: 5;
    -webkit-transition: background-color 300ms 300ms ease-in-out;
    -o-transition: background-color 300ms 300ms ease-in-out;
    transition: background-color 300ms 300ms ease-in-out;
  }
}

.c-header__action--basket span {
  font-size: 1.125rem;
  font-family: "FoundersGroteskCondensedWeb-SemiBold", Arial Narrow, Helvetica, Arial;
  -ms-flex-item-align: center;
      align-self: center;
  padding: 0 0.625rem;
  display: block;
}

@media (min-width: 61.25em) {
  .c-header__action--basket {
    position: relative;
    z-index: 5;
  }
  .c-header__action--basket:hover > a {
    background-color: #b2c15d;
    -webkit-transition-delay: 0ms;
         -o-transition-delay: 0ms;
            transition-delay: 0ms;
  }
  .c-header__action--basket:hover .c-basket {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
  }
}

.c-menu {
  /*
		[1] Adding a height here to match the menu buttons,
		this ensures the dropdown menu activates correctly
	*/
}

@media (max-width: 61.25em) {
  .c-menu {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    z-index: 1;
    background: #e7e6e0;
    background-size: 60%;
    padding: 5rem 0;
    -webkit-transform: translate3d(-100%, 0, 0);
            transform: translate3d(-100%, 0, 0);
    -webkit-transition: -webkit-transform 300ms ease-in-out;
    transition: -webkit-transform 300ms ease-in-out;
    -o-transition: transform 300ms ease-in-out;
    transition: transform 300ms ease-in-out;
    transition: transform 300ms ease-in-out, -webkit-transform 300ms ease-in-out;
    overflow: hidden;
  }
  .c-menu.is-visible {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
  }
}

@media (min-width: 61.25em) {
  .c-menu {
    height: 2.5rem;
  }
}

@media (min-width: 61.25em) {
  .c-menu__expander {
    display: none;
  }
}

.c-menu__root {
  font-size: 1.60181rem;
  font-family: "FoundersGroteskCondensedWeb-SemiBold", Arial Narrow, Helvetica, Arial;
  padding: 0 1.25rem;
  width: 100%;
}

@media (min-width: 61.25em) {
  .c-menu__root {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    font-size: 1.125rem;
    width: auto;
    padding: 0;
  }
}

@media (max-width: 61.25em) {
  .c-menu__item {
    margin: 0.375rem 0;
  }
}

.c-menu__item--lv1 {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

@media (min-width: 61.25em) {
  .c-menu__item--lv1:not(:last-child) {
    margin-right: 0.625rem;
  }
  .c-menu__item--lv1:hover .c-menu__dd {
    visibility: visible;
    opacity: 1;
    -webkit-transition-delay: 100ms;
         -o-transition-delay: 100ms;
            transition-delay: 100ms;
  }
}

.c-menu__item--lv2 {
  display: inline-block;
  width: 100%;
}

.c-menu__dd {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
}

@media (max-width: 61.25em) {
  .c-menu__dd {
    height: 100vh;
    -webkit-transform: translate3d(100%, 0, 0);
            transform: translate3d(100%, 0, 0);
    -webkit-transition: -webkit-transform 300ms ease-in-out;
    transition: -webkit-transform 300ms ease-in-out;
    -o-transition: transform 300ms ease-in-out;
    transition: transform 300ms ease-in-out;
    transition: transform 300ms ease-in-out, -webkit-transform 300ms ease-in-out;
    z-index: 2;
    background-color: #e7e6e0;
    font-size: 1.26562rem;
    padding: 5rem 1.25rem;
  }
  .c-menu__dd.is-visible {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
  }
}

@media (min-width: 61.25em) {
  .c-menu__dd {
    background-color: #ffffff;
    z-index: -1;
    visibility: hidden;
    opacity: 0;
    -webkit-transition: opacity 300ms 100ms ease-in-out, visibility 0ms 400ms;
    -o-transition: opacity 300ms 100ms ease-in-out, visibility 0ms 400ms;
    transition: opacity 300ms 100ms ease-in-out, visibility 0ms 400ms;
  }
  .c-menu__dd:hover {
    visibility: visible;
  }
}

@media (min-width: 61.25em) {
  .c-menu__row {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
    padding-top: 10.625rem;
    padding-bottom: 6.25rem;
  }
}

.c-menu__child {
  -webkit-columns: 2;
          columns: 2;
}

@media (min-width: 61.25em) {
  .c-menu__child {
    -webkit-columns: 3;
            columns: 3;
    width: calc(480px + ((100% - 900px) / 16 * 8));
  }
}

.c-menu__aside {
  width: calc(180px + ((100% - 900px) / 16 * 3));
  font-family: "franklin-gothic-urw", Franklin Gothic Medium, Tahoma;
}

@media (max-width: 61.25em) {
  .c-menu__aside {
    display: none;
  }
}

@media (max-width: 61.25em) {
  [id='menu-sub-nav-closer'] {
    position: absolute;
    top: 0.9375rem;
    left: 3.125rem;
    height: 3.325rem;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
    width: 3.125rem;
    background-color: #cb1d18;
    color: #ffffff;
    visibility: hidden;
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
            transform: translate3d(-100%, 0, 0);
    -webkit-transition: opacity 150ms ease-in-out, visibility 0ms 150ms, -webkit-transform 150ms ease-in-out;
    transition: opacity 150ms ease-in-out, visibility 0ms 150ms, -webkit-transform 150ms ease-in-out;
    -o-transition: transform 150ms ease-in-out, opacity 150ms ease-in-out, visibility 0ms 150ms;
    transition: transform 150ms ease-in-out, opacity 150ms ease-in-out, visibility 0ms 150ms;
    transition: transform 150ms ease-in-out, opacity 150ms ease-in-out, visibility 0ms 150ms, -webkit-transform 150ms ease-in-out;
    z-index: 3;
  }
  [id='menu-sub-nav-closer'].is-visible {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
    visibility: visible;
    -webkit-transition-delay: 0ms;
         -o-transition-delay: 0ms;
            transition-delay: 0ms;
  }
  [id='menu-sub-nav-closer'] .icon {
    -webkit-transform: rotate(180deg);
        -ms-transform: rotate(180deg);
            transform: rotate(180deg);
  }
}

@media (min-width: 61.25em) {
  [id='menu-sub-nav-closer'] {
    display: none;
  }
}

.c-menu__link {
  text-transform: uppercase;
}

@media (min-width: 61.25em) {
  .c-menu__link {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    height: 2.5rem;
    color: #9b8863;
    background-color: #e7e6e0;
    padding: 0 0.625rem;
    line-height: 1;
  }
  .c-header--float .c-menu__link {
    color: #ffffff;
    background-color: rgba(26, 25, 29, 0.3);
  }
}

.c-menu__heading {
  font-family: "FoundersGroteskCondensedWeb-Bold", Arial Narrow, Helvetica, Arial;
  line-height: 0.8;
  margin-bottom: 1.5rem;
  font-size: 2.2807rem;
  text-transform: uppercase;
}

/*
  Components patterns
*/
.c-teaser {
  font-size: calc(0.88889rem + 0.11111000000000004 * ((100vw - 26.25rem) / 53.75));
}
@media screen and (min-width: 1280px) {
  .c-teaser {
    font-size: 1rem;
  }
}
@media screen and (max-width: 420px) {
  .c-teaser {
    font-size: 0.88889rem;
  }
}

.c-teaser p:last-of-type {
  margin-bottom: 0.75rem;
}

.c-teaser__img {
  font-family: "object-fit:cover";
  -o-object-fit: cover;
     object-fit: cover;
  width: 100%;
}

.c-teaser--lead {
  font-size: calc(1rem + 0.26561999999999997 * ((100vw - 26.25rem) / 53.75));
}

@media screen and (min-width: 1280px) {
  .c-teaser--lead {
    font-size: 1.26562rem;
  }
}

@media screen and (max-width: 420px) {
  .c-teaser--lead {
    font-size: 1rem;
  }
}

@media (min-width: 46.25em) {
  .c-teaser--lead {
    height: 10px;
  }
}

.c-teaser--lead .c-teaser__heading,
.c-teaser--lead .c-teaser__img {
  margin-bottom: 1.5rem;
}

.c-teaser--lead p:last-of-type {
  margin-bottom: 2.25rem;
}

.c-teaser--menu .c-teaser__heading {
  font-size: 1.60181rem;
  line-height: 1.125;
  font-family: "FoundersGroteskCondensedWeb-SemiBold", Arial Narrow, Helvetica, Arial;
  margin-bottom: 0.75rem;
}

.c-teaser__heading,
.c-teaser__img {
  margin-bottom: 1.125rem;
}

/*
  Layouts
*/
[devmode] > * {
  border: 1px dotted #cb1d18;
}

[devmode] .l-feed-grid__cell {
  background-color: rgba(203, 29, 24, 0.5);
  margin-bottom: 1.25rem;
  position: relative;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

[devmode] .l-feed-grid__cell > * {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

[devmode] .l-feed-grid__cell:before {
  position: relative;
  display: block;
  content: "";
  padding-top: 100%;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

[devmode] .l-feed-grid__cell .box {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

[devmode] .l-feed-grid__cell > * {
  outline: none;
}

.l-feed-grid {
  margin-bottom: 3rem;
}

@media (min-width: 31.25em) {
  .l-feed-grid {
    -webkit-box-pack: start;
        -ms-flex-pack: start;
            justify-content: flex-start;
  }
}

@media (min-width: 46.25em) {
  .l-feed-grid {
    margin-bottom: 4.5rem;
  }
}

@media (min-width: 68.75em) {
  .l-feed-grid {
    margin-bottom: 6rem;
  }
}

@media (min-width: 31.25em) {
  .l-feed-grid__cell {
    width: calc(300px + ((100% - 660px) / 12 * 6));
  }
  .l-feed-grid__cell:not(:nth-child(2n)) {
    margin-right: 60px;
  }
}

@media (min-width: 46.25em) {
  .l-feed-grid__cell {
    width: calc(180px + ((100% - 660px) / 12 * 4));
    margin-right: 60px;
  }
  .l-feed-grid__cell:nth-child(3n) {
    margin-right: 0;
  }
}

/*
  Pages
*/
.g {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  width: 100%;
  margin-left: -3.75rem;
}

.g__col {
  width: calc(((100% - 660px) / 12 * 1));
  outline: 1px dotted red;
  margin-left: 3.75rem;
}

.g__col::before {
  content: ' ';
  padding-top: 100%;
  display: block;
}

.b__col {
  width: calc(120px + ((100% - 660px) / 12 * 3));
  outline: 1px dotted red;
  margin-left: 3.75rem;
}

.b__col::before {
  content: ' ';
  padding-top: 100%;
  display: block;
}

.b__col--2 {
  width: calc(300px + ((100% - 660px) / 12 * 6));
}

/*
  Utilities
*/
.u-hidden {
  display: none;
}

/*
  Print styles
*/
/* stylelint-disable */
/*
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 *
 * This file contains only the print styles from the HTML5 Boilerplate
 * project. See <https://github.com/h5bp/html5-boilerplate> for more
 * information on the main project.
 */
/* ==========================================================================
   Print styles.
   ========================================================================== */
@media print {
  *,
  *::after,
  *::before {
    background: transparent !important;
    color: #000 !important;
    -webkit-box-shadow: none !important;
            box-shadow: none !important;
    text-shadow: none !important;
  }
  a,
  a:visited {
    text-decoration: underline;
  }
  a[href]::after {
    content: " (" attr(href) ")";
  }
  abbr[title]::after {
    content: " (" attr(title) ")";
  }
  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: "";
  }
  blockquote,
  pre {
    border: 1px solid #999;
    page-break-inside: avoid;
  }
  thead {
    display: table-header-group;
  }
  img,
  tr {
    page-break-inside: avoid;
  }
  img {
    max-width: 100% !important;
  }
  h2,
  h3,
  p {
    orphans: 3;
    widows: 3;
  }
  h2,
  h3 {
    page-break-after: avoid;
  }
}

.whatever {
  -webkit-transition: opacity 300ms ease, height 200ms ease, -webkit-transform 200ms 300ms ease;
  transition: opacity 300ms ease, height 200ms ease, -webkit-transform 200ms 300ms ease;
  -o-transition: opacity 300ms ease, transform 200ms 300ms ease, height 200ms ease;
  transition: opacity 300ms ease, transform 200ms 300ms ease, height 200ms ease;
  transition: opacity 300ms ease, transform 200ms 300ms ease, height 200ms ease, -webkit-transform 200ms 300ms ease;
  background-image: -o-radial-gradient(center, circle, rgba(26, 25, 29, 0.9), #1a191d 40%);
  background-image: radial-gradient(circle at center, rgba(26, 25, 29, 0.9), #1a191d 40%);
  height: 10px;
  top: 0.2px;
}

.whatever::after {
  -webkit-transition: opacity 800ms ease-in-out 200ms, -webkit-transform 400ms ease-in-out 200ms;
  transition: opacity 800ms ease-in-out 200ms, -webkit-transform 400ms ease-in-out 200ms;
  -o-transition: opacity 800ms ease-in-out 200ms, transform 400ms ease-in-out 200ms;
  transition: opacity 800ms ease-in-out 200ms, transform 400ms ease-in-out 200ms;
  transition: opacity 800ms ease-in-out 200ms, transform 400ms ease-in-out 200ms, -webkit-transform 400ms ease-in-out 200ms;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
